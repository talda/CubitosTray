{
  "GUID": "ad2658",
  "Name": "BlockSquare",
  "Transform": {
    "posX": 33.1378174,
    "posY": 1.02550566,
    "posZ": 34.87198,
    "rotX": 0.00400706474,
    "rotY": 180.000122,
    "rotZ": 180.003433,
    "scaleX": 5,
    "scaleY": 0.1,
    "scaleZ": 5
  },
  "Nickname": "Maginomicon's [b]Readiness Control Panel[/b]",
  "Description": "Use this panel with these tokens to manage readiness to move on.\n\n\"to NO\" mode is useful in games (such as Flamme Rouge) where you want everyone to be able to mark that they're ready to move on.\n\n\"to YES\" mode is useful in games (such as Cockroach Poker) where you want to indicate that a player is still an option.",
  "GMNotes": "",
  "AltLookAngle": {
    "x": 0,
    "y": 0,
    "z": 0
  },
  "ColorDiffuse": {
    "r": 0.5,
    "g": 0.5,
    "b": 0.5
  },
  "LayoutGroupSortIndex": 0,
  "Value": 0,
  "Locked": false,
  "Grid": true,
  "Snap": true,
  "IgnoreFoW": false,
  "MeasureMovement": false,
  "DragSelectable": true,
  "Autoraise": true,
  "Sticky": true,
  "Tooltip": false,
  "GridProjection": false,
  "HideWhenFaceDown": false,
  "Hands": false,
  "LuaScript": "--[[\r\nReady/Available tokens and control panel by Maginomicon\r\nCredit to Tobii for the original drafting tools set.\r\n\r\nUse this panel with these tokens to manage readiness to move on.\r\n\r\nAll players should put a token near their play area, where everyone can see it. \r\n(Delete extra tokens if you're using an AUTO-RESET mode.)\r\n\r\nWhen the panel is in the game, and set to one of the AUTO-RESET modes, it will automatically flip over the player tokens to that mode's side when all of these tokens show the OTHER side.\r\n\r\n\"Auto Reset to NO\" mode is useful in games (such as Flamme Rouge) where you want everyone to be able to mark that they're ready to move on.\r\n\r\n\"Auto Reset to YES\" mode is useful in games (such as Cockroach Poker) where you want to indicate that a player is still an option.\r\n]]--\r\n\r\nnumTokens = 0\r\ntokenGUIDs = {}\r\nmode = 0\r\nbtn_list = {}\r\n\r\nbtn_w_ENABLED = 450\r\nbtn_h_ENABLED = 80\r\nbtn_wh_DISABLED = 0\r\ntoken_property = \"maginomicon_isReadyToken\"\r\n\r\nfunction onload()\r\n    local button_parameters = {}\r\n    \r\n    btn_list[\"SetYes\"] = 0\r\n    button_parameters.click_function = \"onClick_SetYes\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.label = \"Set all to YES\"\r\n    button_parameters.position = {0.0, 0.5, -0.2}\r\n    button_parameters.width = btn_w_ENABLED\r\n    button_parameters.height = btn_h_ENABLED\r\n    button_parameters.font_size = 60\r\n    button_parameters.color = Color.Green\r\n    \r\n    self.createButton(button_parameters)\r\n    \r\n    btn_list[\"SetNo\"] = 1\r\n    button_parameters.click_function = \"onClick_SetNo\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.label = \"Set all to NO\"\r\n    button_parameters.position = {0.0, 0.5, 0.2}\r\n    button_parameters.width = btn_w_ENABLED\r\n    button_parameters.height = btn_h_ENABLED\r\n    button_parameters.font_size = 60\r\n    button_parameters.color = Color.Red\r\n    \r\n    self.createButton(button_parameters)\r\n    \r\n    btn_list[\"ToggleReset\"] = 2\r\n    button_parameters.click_function = \"onClick_ToggleReset\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.label = \"Auto-Reset: OFF\"\r\n    button_parameters.position = {0.0, -0.5, 0.0}\r\n    button_parameters.rotation = {180.0, 180.0, 0.0}\r\n    button_parameters.width = btn_w_ENABLED\r\n    button_parameters.height = btn_h_ENABLED\r\n    button_parameters.font_size = 40\r\n    button_parameters.color = Color.White\r\n    \r\n    self.createButton(button_parameters)\r\n    \r\n    btn_list[\"texttop\"] = 3\r\n    button_parameters.click_function = \"doNothing\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.label = \"FLIP FOR SETTINGS\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFLIP FOR SETTINGS\"\r\n    button_parameters.position = {0.0, 0.5, 0.0}\r\n    button_parameters.rotation = {0.0, 0.0, 0.0}\r\n    button_parameters.width = btn_wh_DISABLED\r\n    button_parameters.height = btn_wh_DISABLED\r\n    button_parameters.font_size = 40\r\n    button_parameters.color = Color.Black\r\n    \r\n    self.createButton(button_parameters)\r\n    \r\n    btn_list[\"texttop\"] = 4\r\n    button_parameters.click_function = \"doNothing\"\r\n    button_parameters.function_owner = self\r\n    button_parameters.label = \"FLIP FOR SET BUTTONS\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nFLIP FOR SET BUTTONS\"\r\n    button_parameters.position = {0.0, -0.5, 0.0}\r\n    button_parameters.rotation = {180.0, 180.0, 0.0}\r\n    button_parameters.width = btn_wh_DISABLED\r\n    button_parameters.height = btn_wh_DISABLED\r\n    button_parameters.font_size = 40\r\n    button_parameters.color = Color.Black\r\n    \r\n    self.createButton(button_parameters)\r\nend\r\n\r\nfunction doNothing()\r\nend\r\n\r\nfunction onClick_SetYes()\r\n    for i,obj in ipairs(getAllObjects()) do\r\n        if obj.getVar(token_property) then \r\n            cur = obj.getRotation()\r\n            obj.setRotation({cur.x,cur.y,0})\r\n        end\r\n    end\r\nend\r\n\r\nfunction onClick_SetNo()\r\n    for i,obj in ipairs(getAllObjects()) do\r\n        if obj.getVar(token_property) then \r\n            cur = obj.getRotation()\r\n            obj.setRotation({cur.x,cur.y,180})\r\n        end\r\n    end\r\nend\r\n\r\nfunction onClick_ToggleReset()\r\n    --log(\"!! onClick_ToggleReset, numTokens = \" .. numTokens .. \", mode = \" .. mode)\r\n    num = 0\r\n    if numTokens == 0 then\r\n        checkBuild()\r\n    end\r\n    if mode == 0 then\r\n        -- set mode to 1 (flip all to NO when all are YES)\r\n        mode = 1\r\n        modifyButton(btn_list[\"ToggleReset\"],\"Auto-Reset: to NO\",Color.Red,true)\r\n        modifyButton(btn_list[\"SetYes\"],\"\",Color.Green,false)\r\n        modifyButton(btn_list[\"SetNo\"],\"Set all to NO\",Color.Red,true)\r\n    elseif mode == 1 then\r\n        -- set mode to -1 (flip all to YES when all are NO)\r\n        mode = -1\r\n        modifyButton(btn_list[\"ToggleReset\"],\"Auto-Reset: to YES\",Color.Green,true)\r\n        modifyButton(btn_list[\"SetYes\"],\"Set all to YES\",Color.Green,true)\r\n        modifyButton(btn_list[\"SetNo\"],\"\",Color.Red,false)\r\n    elseif mode == -1 then\r\n        -- set mode to 0 (do not automatically flip anything)\r\n        mode = 0\r\n        modifyButton(btn_list[\"ToggleReset\"],\"Auto-Reset: OFF\",Color.White,true)\r\n        modifyButton(btn_list[\"SetYes\"],\"Set all to YES\",Color.Green,true)\r\n        modifyButton(btn_list[\"SetNo\"],\"Set all to NO\",Color.Red,true)\r\n    end\r\nend\r\n\r\n--[[ modifyButton(btn_num[, enabled OR [text , color[, enabled] ] ])\r\nThis function changes a button's details\r\nWith 1 argument, it merely switches the button between enabled and disabled\r\nWith 2 arguments, it manually sets whether the button is enabled or disabled\r\nWith 3 or 4 arguments, it modifies the text (2nd argument) and color (3rd argument) of the button\r\nWith 4 arguments, it also manually sets whether the button is enabled or disabled\r\nArguments (in order):\r\nnumber: the number of the button\r\nstring: the text to be put on the button\r\ntable: A color to be put on the button\r\nboolean: Whether to specifically enable or disable the button regardless of its current status\r\n]]--\r\n\r\nfunction getNumTokens()\r\n    --log(\"!! getNumTokens()\")\r\n    num = 0\r\n    for i,obj in ipairs(getAllObjects()) do\r\n        if obj.getVar(token_property) then\r\n            num = num + 1\r\n        end\r\n    end\r\n    return num\r\nend\r\n\r\nfunction checkBuild()\r\n    --log(\"-- checkBuild()\")\r\n    test = getNumTokens()\r\n    if numTokens ~= test then buildTokens() end\r\nend\r\n\r\nfunction buildTokens()\r\n    --log(\"-- -- buildTokens()\")\r\n    numTokens = 0\r\n    tokenGUIDs = {}\r\n    for i,obj in ipairs(getAllObjects()) do\r\n        if obj.getVar(token_property) then \r\n            -- populate the tokenGUIDs list\r\n            -- log( \"This GUID = \" .. obj.getGUID() )\r\n            table.insert( tokenGUIDs,obj.getGUID() )\r\n            numTokens = numTokens + 1\r\n        end\r\n    end\r\nend\r\n\r\nfunction onUpdate()\r\n    if mode ~= 0 and numTokens > 0 then\r\n    --log(\"==== Update: mode = \" .. mode .. \", numTokens = \" .. numTokens )\r\n        checkBuild()\r\n        facing = 0\r\n        for i,v in pairs(tokenGUIDs) do\r\n            -- log(\"GUID = \" .. v )\r\n            if getObjectFromGUID(v).is_face_down then\r\n                facing = facing - 1 -- a token is face-down\r\n            else\r\n                facing = facing + 1 -- a token is face-up\r\n            end\r\n        end\r\n        if facing == numTokens and mode == 1 then\r\n            onClick_SetNo()\r\n            broadcastToAll(\"Everyone's marked YES/READY, so move on.\", Color.Red)\r\n        end\r\n        if -facing == numTokens and mode == -1 then\r\n            onClick_SetYes()\r\n            broadcastToAll(\"Everyone's marked NO/UNAVAILABLE, so move on.\", Color.Green)\r\n        end\r\n    end\r\nend\r\n\r\nfunction yell(msg)\r\n\trgb = {r=1, g=0, b=0}\r\n\tbroadcastToAll(msg, rgb)\r\nend\r\n\r\n--[[ modifyButton(btn_num[, enabled OR [text , color[, enabled] ] ])\r\nThis function changes a button's details\r\nWith 1 argument, it merely switches the button between enabled and disabled\r\nWith 2 arguments, it manually sets whether the button is enabled or disabled\r\nWith 3 or 4 arguments, it modifies the text (2nd argument) and color (3rd argument) of the button\r\nWith 4 arguments, it also manually sets whether the button is enabled or disabled\r\nArguments (in order):\r\nnumber: the number of the button\r\nstring: the text to be put on the button\r\ntable: A color to be put on the button\r\nboolean: Whether to specifically enable or disable the button regardless of its current status\r\n]]--\r\nfunction modifyButton(...)\r\n\t--log(\">>>> modifyButton\")\r\n\t--log(\">>--<< modifyButton \" .. select(1,...))\r\n\t--log(\"select('#',...) =\".. select('#',...) )\r\n\tif ( select('#',...) < 1 or select('#',...) > 4 ) then return 1 end\r\n\t\r\n\t--log(\"type 1 = \".. type(select(1,...)) .. \"\\ntype 2 = \" .. type(select(2,...)) .. \"\\ntype 3 = \".. type(select(3,...)) .. \"\\ntype 4 = \".. type(select(4,...)) )\r\n\t\r\n\tif (\r\n\t\ttype(select(1,...)) ~= \"number\" or \r\n\t\t( select('#',...) == 2 and type(select(2,...)) ~= \"boolean\" ) or \r\n\t\t( select('#',...) >= 3 and type(select(2,...)) ~= \"string\" ) or \r\n\t\t( select('#',...) >= 3 and type(select(3,...)) ~= \"table\" ) or \r\n\t\t( select('#',...) == 4 and type(select(4,...)) ~= \"boolean\" )\r\n\t\t)\r\n\t\tthen return 2\r\n\tend\r\n\t\r\n\t-- load the arguments into local variables\r\n\tlocal btn_num = select(1,...)\r\n\tlocal btn_text = select(2,...)\r\n\tlocal btn_color = select(3,...)\r\n\tlocal enabled\r\n\tif select('#',...) == 2\r\n\t\tthen\r\n\t\t\tenabled = select(2,...)\r\n\t\telse\r\n\t\t\tenabled = select(4,...)\r\n\tend\r\n\t--log(enabled,\"-- enabled = \")\r\n\t\r\n\t-- if there's only one argument\r\n\tif select('#',...) == 1\r\n\t\tthen\r\n\t\t\t--log(\">>>>-- there was 1 argument\")\r\n\t\t\t--log(self.getButtons()[btn_num+1][\"width\"],\"self.getButtons()[btn_num+1]['width'] =\")\r\n\t\t\t-- if the button is currently disabled\r\n\t\t\tif ( self.getButtons()[btn_num+1][\"width\"] == btn_wh_DISABLED )\r\n\t\t\t\tthen\r\n\t\t\t\t\t-- enable button\r\n\t\t\t\t\t--log(\">>>>-- Enable button \".. btn_num)\r\n\t\t\t\t\tself.editButton({ index=btn_num, width=btn_w_ENABLED, height=btn_h_ENABLED })\r\n\t\t\t\t\t-- NOTE: The +1 here is because of the differences in indexing between Lua and C++/Unity\r\n\t\t\t\t\t--log(self.getButtons()[btn_num+1][\"width\"],\"self.getButtons()[btn_num+1]['width'] =\")\r\n\t\t\t\telse\r\n\t\t\t\t\t-- disable button\r\n\t\t\t\t\t--log(\">>>>-- Disable button \".. btn_num)\r\n\t\t\t\t\tself.editButton({ index=btn_num, width=btn_wh_DISABLED, height=btn_wh_DISABLED })\r\n\t\t\t\t\t-- NOTE: The +1 here is because of the differences in indexing between Lua and C++/Unity\r\n\t\t\t\t\t--log(self.getButtons()[btn_num+1][\"width\"],\"self.getButtons()[btn_num+1]['width'] =\")\r\n\t\t\tend\r\n\t\t\t--log(\"<<<< modifyButton\")\r\n\t\t\treturn 0\r\n\tend\r\n\t\r\n\t-- if there's exactly 2 arguments\r\n\tif select('#',...) == 2\r\n\t\tthen\r\n\t\t\t--log(\">>>>-- there were 2 arguments\")\r\n\t\t\tlocal size_w = btn_wh_DISABLED\r\n            local size_h = btn_wh_DISABLED\r\n\t\t\t-- enable or disable the button\r\n\t\t\tif enabled then\r\n                size_w = btn_w_ENABLED\r\n                size_h = btn_h_ENABLED\r\n            end\r\n\t\t\tself.editButton({ index=btn_num, width=size_w, height=size_h })\r\n\t\t\t--log(\"<<<< modifyButton\")\r\n\t\t\treturn 0\r\n\tend\r\n\t\r\n\t-- if there's exactly 3 arguments\r\n\tif select('#',...) == 3\r\n\t\tthen\r\n\t\t\t--log(\">>>>-- there were 3 arguments\")\r\n\t\t\t-- modify button\r\n\t\t\t--log(\">>>>-- Modifying button \".. btn_num)\r\n\t\t\tself.editButton({ index=btn_num, label=btn_text, color=btn_color })\r\n\t\t\t--log(\"<<<< modifyButton\")\r\n\t\t\treturn 0\r\n\tend\r\n\t\r\n\t-- if there's exactly 4 arguments\r\n\tif select('#',...) == 4\r\n\t\tthen\r\n\t\t\t--log(\">>>>-- there were 4 arguments\")\r\n\t\t\t-- modify button\r\n\t\t\t--log(\">>>>-- Modifying button \".. btn_num)\r\n\t\t\tlocal size_w = btn_wh_DISABLED\r\n            local size_h = btn_wh_DISABLED\r\n\t\t\t-- enable or disable the button\r\n\t\t\tif enabled then\r\n                size_w = btn_w_ENABLED\r\n                size_h = btn_h_ENABLED\r\n            end\r\n\t\t\tself.editButton({ index=btn_num, label=btn_text, color=btn_color, width=size_w, height=size_h })\r\n\t\t\t--log(\"<<<< modifyButton\")\r\n\t\t\treturn 0\r\n\tend\r\n\t\r\n\t--log(\"<<<< modifyButton\")\r\n\treturn 4\r\nend",
  "LuaScriptState": "",
  "XmlUI": ""
}